const {Router} = require('express')
const bcrypt = require('bcrypt')
const config = require('config')
const jwt = require('jsonwebtoken')
const {check, validationResult} = require('express-validator')
const User = require('../models/User')
const router = Router()

router.post(
  '/signup',
  [
    check('email', "Incorect email").isEmail(),
    check('password', "Min lenght 6 symbols").isLength({min: 6})
  ],
  async (req, res) => {
    try {                 
      const errors = validationResult(req)

      if (!errors.isEmpty()) {
        return res.status(400).json({
          error: true,
          errors: errors.array(),
          message: 'Incorect registration data'
        })
      }

      const {email, password} = reg.body

      const candidate = await User.findOne({ email })

      if (candidate) {
        return res.status(500).json({
          error: true,
          message: "User exists"
        })
      }

      const hashedPassword = await bcrypt.hash(password, 12)
      const user = new User({email, password: hashedPassword })

      await user.save()

      res.status(201).json({
        error: true,
        message: "User created"
      })

    } catch(e) {
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.status(500).json({
        error: true,
        message: "Error. Try!"
      })
    }
  }

)

router.post(
  '/signin',
  [
    check('email', "Enter valid email").normalizeEmail().isEmail(),
    check('password', "Enter password").exists()
  ],

  async (req, res) => {

    console.log(req)

    try {

      const errors = validationResult(req)

      if (!errors.isEmpty()) {
        return res.status(400).json({
          errors: errors.array(),
          message: 'Incorect login data'
        })
      }

      const {email, password} = req.body

      const user = await User.findOne({ email })

      if (!user) {
        return res.status(404).json({ message: 'Incorect email or password'}) // User not found
      }

      const isMatch = await bcrypt.compare(password, user.password)

      if (!isMatch) {
          return res.status(404).json({ message: 'Incorect email or password'}) // Incorect password
      }
      
      const token = jwt.sign(
        { userId: user.id },
        config.get('jwtSecret'),
        { expiresIn: '1h'}
      )

      res.json({ token, userId: user.id})

    } catch(e) {
      res.status(500).json({message: "Error. Try.", error: e})
    }
  }
)

module.exports = router